using BaseSLAM;
using Godot;
using Emgu.CV;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Point = System.Drawing.Point;
using Emgu.CV.CvEnum;

public partial class Lidar : Node3D
{
	bool Emerg = false;
	System.Numerics.Vector2 posObj;

	string IP = "127.0.0.1";
	ScanCloud scanCloud;

	CsgBox3D lidar;
	CsgBox3D pos_obj;
	Camera camera;
	RichTextLabel LogTextBox;

	Sprite3D SpriteMapa;
	ImageTexture image;


	static int TamMapa = 1000;
	SistemaLidar sisLidar;
	SistemaMotores sisMotores;
	SistemaMapa sisMapa;

	List<CsgBox3D> boxesPoses = new();


	List<Ray> dados_lidar_ant = new();
	List<Ray> dados_lidar = new();


	int idx_seg = 0;

	void FollowPath2(List<Point> points)
	{
		var currentLocation = sisLidar.PosCurr;
		Log("ini!");
		var pontofinal = OpVec.Vector3pVector2(sisLidar.PosLidarParaJogo(points.Last()));

		var Dist_final_inicio = Math.Sqrt(Math.Pow(currentLocation.X - pontofinal.X, 2) + Math.Pow(currentLocation.Y - pontofinal.Y, 2));

		for (idx_seg = 1; idx_seg < points.Count; idx_seg++)
		{
			var targetPoint = OpVec.Vector3pVector2(sisLidar.PosLidarParaJogo(points[idx_seg]));

			double Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
			while (Dist_Prox > 0.04 && !Emerg)
			{
				double angleToTarget = Math.Atan2(targetPoint.Y - currentLocation.Y, targetPoint.X - currentLocation.X);
				double angleDifference = -((angleToTarget - sisLidar.AngCurr) * (180 / Math.PI)) / 360.0;
				var Dist_final = Math.Sqrt(Math.Pow(currentLocation.X - pontofinal.X, 2) + Math.Pow(currentLocation.Y - pontofinal.Y, 2));

				//if (angleDifference > Math.PI) angleDifference -= 2 * Math.PI;
				//if (angleDifference < -Math.PI) angleDifference += 2 * Math.PI;

				/*	double motor1Speed = 50, motor2Speed = 50;
					motor1Speed *= 1.2 + angleDifference / Math.PI;
					motor2Speed *= 1.2 - angleDifference / Math.PI;


					motor1Speed = Math.Clamp(motor1Speed, -50, 50);
					motor2Speed = Math.Clamp(motor2Speed, -50, 50);

					motor1Speed = motor1Speed * (0.2 + Dist_final / Dist_final_inicio);
					motor2Speed = motor2Speed * (0.2 + Dist_final / Dist_final_inicio);*/

				int vel = 90;//(int)(Dist_final / Dist_final_inicio * 100);
				int steer = (int)(angleDifference * 150.0);

				sisMotores.MandarSteer(steer, vel);
				currentLocation = sisLidar.PosCurr;
				Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
				Log(idx_seg + "   aD" + Math.Round(angleDifference, 4) + "      dif" + (angleToTarget - sisLidar.AngCurr) * (180 / Math.PI) + "      vel: " + vel + " Steer: " + steer
				);
				Thread.Sleep(5);
			}
		}
		sisMotores.MandarSteer(0, 0);
	}

	void IrParaPonto(System.Numerics.Vector2 targetPoint)
	{
		double angleToTarget = Math.Atan2(targetPoint.Y, targetPoint.X);

		var dif = Meth.calcDifBetweenAngles(Meth.Rad4Deg(sisLidar.AngCurr), Meth.Rad4Deg(angleToTarget));
		if (Math.Abs(dif) > 20)
		{
			//Rodar
			RodarParaGrau(targetPoint);
		}
		NavegarParaPonto(targetPoint);

	}
	void NavegarParaPonto(System.Numerics.Vector2 targetPoint)
	{
		var currentLocation = sisLidar.PosCurr;
		var Dist_final_inicio = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
		var Dist_final = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));


		double Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));

		while (Dist_Prox > 0.1 && !Emerg)
		{
			currentLocation = sisLidar.PosCurr;

			double angleToTarget = Math.Atan2(targetPoint.Y - currentLocation.Y, targetPoint.X - currentLocation.X);
			double angleDifference = Meth.Rad4Deg(angleToTarget - sisLidar.AngCurr) / 360.0;

			Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));

			int velRaw = (int)(Dist_Prox / Dist_final_inicio * 700.0);
			int vel = Meth.SpeedControl(velRaw, 80);

			RotinaUpdateRodarParaPonto(targetPoint, vel);

			Log(Dist_Prox + "   aD" + Math.Round(angleDifference, 4) + "      vel: " + vel
			);
			Thread.Sleep(20);
		}
		sisMotores.MandarSteer(0, 0);
		for (int i = 0; i < 5; i++)
		{
			Log("---conc----x");
		}
	}
	void RodarParaGrau(System.Numerics.Vector2 targetPoint)
	{

		double angleDifference = Meth.ObterDifPos(sisLidar.PosCurr, Meth.Rad4Deg(sisLidar.AngCurr), targetPoint);//Meth.calcDifBetweenAngles(Meth.Rad4Deg(sisLidar.AngCurr), Meth.Rad4Deg(angleToTarget));

		while (!(angleDifference < 5 && angleDifference > -5) && !Emerg)
		{

			angleDifference = Meth.ObterDifPos(sisLidar.PosCurr, Meth.Rad4Deg(sisLidar.AngCurr), targetPoint);//Meth.calcDifBetweenAngles(Meth.Rad4Deg(sisLidar.AngCurr), Meth.Rad4Deg(angleToTarget));
			int steer = Meth.SpeedControl((int)(angleDifference / 180.0 * 400.0), 50);
			Log($"Dif: {angleDifference} SLAC{sisLidar.AngCurr} SC_S: {steer}");
			sisMotores.MandarSteer(steer, 60);

		}
		sisMotores.MandarSteer(0, 0);
		Log("Rodar conc!");
		Thread.Sleep(200);
	}

	void RotinaUpdateRodarParaPonto(System.Numerics.Vector2 targetPoint, int vel)
	{
		double angleDifference = Meth.ObterDifPos(sisLidar.PosCurr, Meth.Rad4Deg(sisLidar.AngCurr), targetPoint);//Meth.calcDifBetweenAngles(Meth.Rad4Deg(sisLidar.AngCurr), Meth.Rad4Deg(angleToTarget));
																												 //Log($"Dif: {angleDifference} {sisLidar.AngCurr}");
		sisMotores.MandarSteer(Meth.SpeedControl((int)(angleDifference / 180 * 800), 200), vel);
	}

	//IGNORAR
	void FollowPath(List<Point> points)
	{
		var currentLocation = sisLidar.PosCurr;
		Log("ini!");
		var pontofinal = posObj;


		var targetPoint = pontofinal;
		IrParaPonto(targetPoint);
		return;
		double Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
		while (Dist_Prox > 0.04 && !Emerg)
		{
			double angleToTarget = Math.Atan2(targetPoint.Y - currentLocation.Y, targetPoint.X - currentLocation.X);
			double angleDifference = ((angleToTarget - sisLidar.AngCurr) * (180 / Math.PI)) / 360.0;
			var Dist_final = Math.Sqrt(Math.Pow(currentLocation.X - pontofinal.X, 2) + Math.Pow(currentLocation.Y - pontofinal.Y, 2));
			var Dist_final_inicio = Math.Sqrt(Math.Pow(currentLocation.X - pontofinal.X, 2) + Math.Pow(currentLocation.Y - pontofinal.Y, 2));

			//if (angleDifference > Math.PI) angleDifference -= 2 * Math.PI;
			//if (angleDifference < -Math.PI) angleDifference += 2 * Math.PI;

			/*	double motor1Speed = 50, motor2Speed = 50;
				motor1Speed *= 1.2 + angleDifference / Math.PI;
				motor2Speed *= 1.2 - angleDifference / Math.PI;


				motor1Speed = Math.Clamp(motor1Speed, -50, 50);
				motor2Speed = Math.Clamp(motor2Speed, -50, 50);

				motor1Speed = motor1Speed * (0.2 + Dist_final / Dist_final_inicio);
				motor2Speed = motor2Speed * (0.2 + Dist_final / Dist_final_inicio);*/

			int vel = (int)(Dist_final / Dist_final_inicio * 70) + 20;
			int steer = (int)(angleDifference * Math.Max((Dist_final / Dist_final_inicio) + 0.8, 0.001) * 600.0);//* (1.0 - Dist_final / Dist_final_inicio) * (Dist_final / Dist_final_inicio)
			if (steer > 500)
			{
				Emerg = true;
				steer = 0;
				sisMotores.MandarSteer(0, 0);

			}
			sisMotores.MandarSteer(steer, vel);
			currentLocation = sisLidar.PosCurr;
			Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
			Log(Math.Round(Dist_Prox, 4) + "   aD" + Math.Round(angleDifference, 4) + "      dif" + (angleToTarget - sisLidar.AngCurr) * (180 / Math.PI) + "      vel: " + vel + " Steer: " + steer
			);
			Thread.Sleep(5);
		}
		sisMotores.MandarSteer(0, 0);
		for (int i = 0; i < 5; i++)
		{
			Log("---conc----x");
		}
	}

	// Called when the node enters the scene tree for the first time.
	public override void _Ready()
	{
		lidar = GetNode<CsgBox3D>("lidar");
		scanCloud = GetNode<ScanCloud>("lidar/scanCloud");
		SpriteMapa = GetNode<Sprite3D>("Mapa");
		pos_obj = GetNode<CsgBox3D>("pos_obj");
		camera = GetNode<Camera>("../Camera");
		LogTextBox = GetNode<RichTextLabel>("../LogTextBox");


		Iniciar();
	}
	string texto_log = "";
	List<string> logs = new();

	void Log(object txt)
	{
		if (logs.Count > 100)
		{
			logs.RemoveAt(0);
		}
		logs.Add($"{DateTime.Now.Second}: " + txt);
		texto_log = logs.ToArray().Join("\n");
		//GD.Print(txt);
	}
	public void Iniciar()
	{
		sisLidar = new SistemaLidar()
		{
			TamMapa = TamMapa
		};
		sisLidar.Iniciar(IP);
		sisLidar.OnDadosRecebidos += (dados) =>
		{
			scanCloud.UpdatePontos(dados.Rays);
			dados_lidar = dados.Rays;
		};

		sisMapa = new SistemaMapa();
		sisMapa.Iniciar(IP);
		sisMapa.OnDadosRecebidos += (dados) =>
		{
			image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, dados));
		};

		sisMotores = new SistemaMotores();
		sisMotores.IniMotores();

	}

	List<Point> poses_cam = new();
	int Contador_update = 0;
	StandardMaterial3D matPosConc = new StandardMaterial3D() { AlbedoColor = new Godot.Color(1, 1, 0.8f) };

	// Called every frame. 'delta' is the elapsed time since the previous frame.
	public override void _Process(double delta)
	{
		//sisLidar.PosCurr = new System.Numerics.Vector2(camera.Position.X, camera.Position.Z);
		//Log(sisLidar.PosCurr.X.ToString());
		if (Contador_update > 15)
		{
			SpriteMapa.Texture = image;

			//GD.Print(Convert.ToHexString(SHA256.HashData(Dados_mapa)));

			//new Vector3(PosLidarParaJogo(dados_recs.Pose.X), 0, (dados_recs.Pose.Y - TamMapa / 2) / (float)DivMapa);

			if (boxesPoses.Count > idx_seg)
			{
				for (int i = 0; i < idx_seg; i++)
				{
					boxesPoses[i].Material = matPosConc;
				}
			}
			LogTextBox.Text = texto_log;
			Contador_update = 0;
		}
		if (Contador_update % 4 == 0)
		{
			lidar.Position = OpVec.Vector2pVector3(sisLidar.PosCurr);
			lidar.Rotation = new Vector3(lidar.Rotation.X, sisLidar.AngCurr, lidar.Rotation.Z);

			scanCloud.Rotation = new Vector3(scanCloud.Rotation.X, -sisLidar.AngCurr * 2.0f, scanCloud.Rotation.Z);//tem de ser *2 pois ao virar o child "lidar" tmb movemos a cloud. a outra é para que n se mexa e fique no seu lugar

		}
		Contador_update++;
	}


	public override void _Input(InputEvent @event)
	{
		if (@event is InputEventKey keyEvent && keyEvent.Pressed)
		{
			if (keyEvent.Keycode == Key.C)
			{

				//new Thread(() =>
				//{

				Mat mat = new Mat(TamMapa, TamMapa, DepthType.Cv8U, 1);
				mat.SetTo(sisMapa.Dados_mapa);
				//Mat mate = new Mat(TamMapa, TamMapa, MatType.CV_8U, sisMapa.Dados_mapa);
				CvInvoke.Normalize(mat, mat, 0, 255.0, normType: NormType.MinMax, dType: DepthType.Cv8U);
				CvInvoke.Threshold(mat, mat, 200, 255, ThresholdType.Binary);

				//new Window("image1", mat);
				//CvInvoke.WaitKey();

				CvInvoke.DistanceTransform(mat, mat, null, DistType.L2, 3);
				CvInvoke.Normalize(mat, mat, 0, 255.0, NormType.MinMax, dType: DepthType.Cv8U);

				/*new Window("image3", mat);
				CvInvoke.WaitKey();
*/


				Log("Ok!");
				byte[] ExpandedMapData = new byte[TamMapa * TamMapa];
				Log("A copy...");
				mat.CopyTo(ExpandedMapData);

				image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, ExpandedMapData));
				Log("Ok final!");
				SpriteMapa.Texture = image;

				//}).Start();
			}
			if (keyEvent.Keycode == Key.J)
			{
				SpriteMapa.Texture = image;
			}
			if (keyEvent.Keycode == Key.Y)
			{
				pos_obj.Position = new Vector3((float)Math.Round(camera.Position.X, 2), 0, (float)Math.Round(camera.Position.Z, 2));
			}

			//T é o novo. Y(def obj) -> T(fazer percurso) -> G(go, ir para o lugar, mexer o robo)
			if (keyEvent.Keycode == Key.T)
			{
				Log("T was pressed");

				Log("A fazer limpeza...");
				poses_cam.Clear();
				foreach (var child in boxesPoses)
				{
					RemoveChild(child);
				}
				boxesPoses.Clear();
				idx_seg = 0;
				poses_cam = new();
				Log("Ok!");

				//(posmapa - TamMapa / 2) / (float)DivMapa de mapa para jogo
				//new System.Numerics.Vector2(pos_obj.Position.X * (float)DivMapa + (TamMapa / 2), pos_obj.Position.Z * (float)DivMapa + (TamMapa / 2));
				posObj = OpVec.Vector3pVector2(pos_obj.Position);

				Log("A fazer distance tranform...");
				var sw = Stopwatch.StartNew();

				var worldGrid = new AStar.WorldGrid(TamMapa, TamMapa);





				//Para debugging
				//Mat matIn = new Mat(TamMapa, TamMapa, MatType.CV_8S, ExpandedMapData);
				//var ____window___ = new Window("src image", mat);
				//Cv2.WaitKey();



				Log("Tempo total conv mapa: " + sw.ElapsedMilliseconds);

				sw.Restart();
				Log($"Obj jogo: {posObj} start lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr))} end lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(posObj))}");


			}
			//T é o novo. Y(def obj) -> T(fazer percurso) -> G(go, ir para o lugar, mexer o robo)
			if (keyEvent.Keycode == Key.Q)
			{
				Log("T was pressed");

				Log("A fazer limpeza...");
				poses_cam.Clear();
				foreach (var child in boxesPoses)
				{
					RemoveChild(child);
				}
				boxesPoses.Clear();
				idx_seg = 0;
				poses_cam = new();
				Log("Ok!");

				//(posmapa - TamMapa / 2) / (float)DivMapa de mapa para jogo
				//new System.Numerics.Vector2(pos_obj.Position.X * (float)DivMapa + (TamMapa / 2), pos_obj.Position.Z * (float)DivMapa + (TamMapa / 2));
				var pos_ob = OpVec.Vector3pVector2(pos_obj.Position);

				Log("A fazer distance tranform...");
				var sw = Stopwatch.StartNew();

				var worldGrid = new AStar.WorldGrid(TamMapa, TamMapa);




				// 1 é livre 0 é fechado
				Mat mat = new Mat(TamMapa, TamMapa, DepthType.Cv8U, 1);
				mat.SetTo(sisMapa.Dados_mapa);

				CvInvoke.Normalize(mat, mat, 0, 255.0, normType: NormType.MinMax, dType: DepthType.Cv8U);
				CvInvoke.Threshold(mat, mat, 200, 255, ThresholdType.Binary);

				CvInvoke.DistanceTransform(mat, mat, null, DistType.L2, 3);
				CvInvoke.Normalize(mat, mat, 0, 255.0, NormType.MinMax, dType: DepthType.Cv8U);


				Log("A copiar para array...");
				byte[] DadosMapaTransformados = new byte[TamMapa * TamMapa];
				mat.CopyTo(DadosMapaTransformados);
				mat.Dispose();

				//Para debugging
				//Mat matIn = new Mat(TamMapa, TamMapa, MatType.CV_8S, ExpandedMapData);
				//var ____window___ = new Window("src image", mat);
				//Cv2.WaitKey();


				Log("A copiar dados para grid...");
				Parallel.For(0, DadosMapaTransformados.Length, (i) =>
				{
					worldGrid._grid[i] = (short)(DadosMapaTransformados[i] / 3);//Preciso de div por 3 para ou sn n faz caminho
				});

				image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, DadosMapaTransformados));
				SpriteMapa.Texture = image;
				Log("Tempo total conv mapa: " + sw.ElapsedMilliseconds);

				var pathfinderOptions = new AStar.Options.PathFinderOptions
				{
					SearchLimit = TamMapa * TamMapa,
					UseDiagonals = true,
					//PunishChangeDirection = false,
					//HeuristicFormula = AStar.Heuristics.HeuristicFormula.Euclidean,
					Weighting = AStar.Options.Weighting.Positive
				};
				var pathfinder = new AStar.PathFinder(worldGrid, pathfinderOptions);


				sw.Restart();
				Log($"Obj jogo: {pos_ob} start lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr))} end lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))}");

				poses_cam = pathfinder.FindPath(
					OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr)),
					OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))
				).ToList();

				Log($"Cam enc! {sw.ElapsedMilliseconds}ms Tam: {poses_cam.Count}");

				var matPos = new StandardMaterial3D() { AlbedoColor = new Godot.Color(0.5f, 0.8f, 1) };

				for (int i = 0; i < poses_cam.Count; i++)
				{
					boxesPoses.Add(new CsgBox3D()
					{
						Position = sisLidar.PosLidarParaJogo(poses_cam[i]),
						Size = new Vector3(0.01f, 1, 0.01f),
						Material = matPos,
					});
					AddChild(boxesPoses[i]);
				}
			}

			if (keyEvent.Keycode == Key.Backspace)
			{
				Log("F was pressed");

				Log("A fazer limpeza...");
				poses_cam.Clear();
				foreach (var child in boxesPoses)
				{
					RemoveChild(child);
				}
				boxesPoses.Clear();
				idx_seg = 0;
				poses_cam = new();
				Log("Ok!");

			}
			/*if (keyEvent.Keycode == Key.F)
			{
				Log("F was pressed");

				Log("A fazer limpeza...");
				poses_cam.Clear();
				foreach (var child in boxesPoses)
				{
					RemoveChild(child);
				}
				boxesPoses.Clear();
				idx_seg = 0;
				poses_cam = new();
				Log("Ok!");

				//(posmapa - TamMapa / 2) / (float)DivMapa de mapa para jogo
				//new System.Numerics.Vector2(pos_obj.Position.X * (float)DivMapa + (TamMapa / 2), pos_obj.Position.Z * (float)DivMapa + (TamMapa / 2));
				 posObj = OpVec.Vector3pVector2(pos_obj.Position);

				Log("for...");

				var worldGrid = new AStar.WorldGrid(TamMapa, TamMapa);
				var sw = Stopwatch.StartNew();
				byte[] ExpandedMapData = new byte[TamMapa * TamMapa];



				int bb = 2 / 2; //tam para fazer parede
				int max = TamMapa * TamMapa;
				var dados_mapa = sisMapa.Dados_mapa;
				Parallel.For(bb, max, (i) =>// 1 é livre 0 é fechado
				{
					if (dados_mapa[i] == 0)
					{
						int x = i / TamMapa;
						int y = i % TamMapa;

						for (int x_ = x - bb; x_ < x + bb; x_++)
						{
							for (int y_ = y - bb; y_ < y + bb; y_++)
							{
								int i__ = x_ * TamMapa + y_;
								if (i__ >= 0 && i__ < max)
								{
									worldGrid._grid[i__] = 0;
									ExpandedMapData[i__] = 1;
								}
							}
						}
						ExpandedMapData[i] = 50;
					}

				});
				Parallel.For(0, TamMapa * TamMapa, (i) =>// 1 é livre 0 é fechado
				{
					if (dados_mapa[i] == 254)
					{
						if (ExpandedMapData[i] != 1 && ExpandedMapData[i] != 50)
						{
							worldGrid._grid[i] = 1;
							ExpandedMapData[i] = 254;
						}
					}
				});




				image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, ExpandedMapData));
				SpriteMapa.Texture = image;



				image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, ExpandedMapData));
				SpriteMapa.Texture = image;
				Log("Tempo conv mapa: " + sw.ElapsedMilliseconds);

				var pathfinderOptions = new AStar.Options.PathFinderOptions
				{
					SearchLimit = 80000,
					//UseDiagonals = true,
					PunishChangeDirection = false,
					HeuristicFormula = AStar.Heuristics.HeuristicFormula.Euclidean,
					//Weighting = AStar.Options.Weighting.Positive
				};
				var pathfinder = new AStar.PathFinder(worldGrid, pathfinderOptions);


				sw.Restart();
				Log($"Obj jogo: {posObj} ini lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr))} fim lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))}");

				poses_cam = pathfinder.FindPath(
					OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr)),
					OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))
				).ToList();

				Log(sw.ElapsedMilliseconds + "  Cam enc! Tam: " + poses_cam.Count);

				var matPos = new StandardMaterial3D() { AlbedoColor = new Godot.Color(0.5f, 0.8f, 0) };

				for (int i = 0; i < poses_cam.Count; i++)
				{
					boxesPoses.Add(new CsgBox3D()
					{
						Position = sisLidar.PosLidarParaJogo(poses_cam[i]),
						Size = new Vector3(0.01f, 1, 0.01f),
						Material = matPos,
					});
					AddChild(boxesPoses[i]);
				}
			}

*/

			if (keyEvent.Keycode == Key.G)
			{
				Emerg = false;
				new Thread(() =>
				{
					FollowPath(poses_cam);
				}).Start();
			}
			if (keyEvent.Keycode == Key.P)
			{
				Log("A parar!!");
				for (int i = 0; i < 100; i++)
				{
					sisMotores.MandarSteer(0, 0);
					Emerg = true;
					Thread.Sleep(1);
				}
				Log("Parar ok!");
			}
			if (keyEvent.Keycode == Key.K)
			{
				dados_lidar_ant = dados_lidar;
				Log("ok!");
			}
			if (keyEvent.Keycode == Key.V)
			{
				new Thread(() =>
				{
					var sw = Stopwatch.StartNew();
					while (!Emerg && sw.ElapsedMilliseconds < 4000)
					{
						sisMotores.MandarSteer(0, 90);
					}
					sisMotores.MandarSteer(0, 0);
					Thread.Sleep(500);
					while (!Emerg && sw.ElapsedMilliseconds < 2500)
					{
						sisMotores.MandarSteer(100, 0);
					}
					sisMotores.MandarSteer(0, 0);


				}).Start();
			}
			if (keyEvent.Keycode == Key.L)
			{
				var dados_curr = dados_lidar;

				dados_lidar = dados_lidar.OrderBy(r => r.Angle).ToList();
				dados_lidar_ant = dados_lidar_ant.OrderBy(r => r.Angle).ToList();

				float maxDistance = 0;

				// Iterate over the sorted lists simultaneously
				for (int i = 0; i < Math.Min(dados_lidar.Count, dados_lidar_ant.Count); i++)
				{
					Ray ray1 = dados_lidar[i];
					Ray ray2 = dados_lidar_ant[i];

					// Calculate the difference in angle and radius
					float angleDiff = Math.Abs(ray1.Angle - ray2.Angle);
					float radiusDiff = Math.Abs(ray1.Radius - ray2.Radius);

					// Update the maximum distance if necessary
					if (radiusDiff > maxDistance)
					{
						Log($"Ang: {ray1.Angle} Dif: {radiusDiff}");
						maxDistance = radiusDiff;
					}
				}

				var ang = 0;
				var ang0 = dados_lidar.OrderBy(item => Math.Abs(ang - item.Angle)).First();
				Log($"Ang 0 dist: {ang0.Radius} {ang0.Angle}");
			}

		}
	}


}
