    //   Log("A copiar dados para grid...");


        // image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, DadosMapaTransformados));
        // SpriteMapa.Texture = image;
        // Log("Tempo total conv mapa: " + sw.ElapsedMilliseconds);



  //Log($"Obj jogo: {pos_ob} start lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr))} end lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))}");



        // Log($"Cam enc! {sw.ElapsedMilliseconds}ms Tam: {posesParaObj.Count}");




        //IGNORAR
	void FollowPath(List<Vector2> points)
	{
		var currentLocation = sisLidar.PosCurr;
		Log("ini!");
		var pontofinal = posObj;


		var targetPoint = pontofinal;
		IrParaPonto(targetPoint);
		return;
		double Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
		while (Dist_Prox > 0.04 && !Emerg)
		{
			double angleToTarget = Math.Atan2(targetPoint.Y - currentLocation.Y, targetPoint.X - currentLocation.X);
			double angleDifference = ((angleToTarget - sisLidar.AngCurr) * (180 / Math.PI)) / 360.0;
			var Dist_final = Math.Sqrt(Math.Pow(currentLocation.X - pontofinal.X, 2) + Math.Pow(currentLocation.Y - pontofinal.Y, 2));
			var Dist_final_inicio = Math.Sqrt(Math.Pow(currentLocation.X - pontofinal.X, 2) + Math.Pow(currentLocation.Y - pontofinal.Y, 2));

			//if (angleDifference > Math.PI) angleDifference -= 2 * Math.PI;
			//if (angleDifference < -Math.PI) angleDifference += 2 * Math.PI;

			/*	double motor1Speed = 50, motor2Speed = 50;
				motor1Speed *= 1.2 + angleDifference / Math.PI;
				motor2Speed *= 1.2 - angleDifference / Math.PI;


				motor1Speed = Math.Clamp(motor1Speed, -50, 50);
				motor2Speed = Math.Clamp(motor2Speed, -50, 50);

				motor1Speed = motor1Speed * (0.2 + Dist_final / Dist_final_inicio);
				motor2Speed = motor2Speed * (0.2 + Dist_final / Dist_final_inicio);*/

			int vel = (int)(Dist_final / Dist_final_inicio * 70) + 20;
			int steer = (int)(angleDifference * Math.Max((Dist_final / Dist_final_inicio) + 0.8, 0.001) * 600.0);//* (1.0 - Dist_final / Dist_final_inicio) * (Dist_final / Dist_final_inicio)
			if (steer > 500)
			{
				Emerg = true;
				steer = 0;
				sisMotores.MandarSteer(0, 0);

			}
			sisMotores.MandarSteer(steer, vel);
			currentLocation = sisLidar.PosCurr;
			Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
			Log(Math.Round(Dist_Prox, 4) + "   aD" + Math.Round(angleDifference, 4) + "      dif" + (angleToTarget - sisLidar.AngCurr) * (180 / Math.PI) + "      vel: " + vel + " Steer: " + steer
			);
			Thread.Sleep(5);
		}
		sisMotores.MandarSteer(0, 0);
		for (int i = 0; i < 5; i++)
		{
			Log("---conc----x");
		}
	}

	/*
		void FollowPath2(List<Point> points)
		{
			var currentLocation = sisLidar.PosCurr;
			Log("ini!");
			var pontofinal = OpVec.Vector3pVector2(SistemaLidar.PosLidarParaJogo(points.Last()));

			var Dist_final_inicio = Math.Sqrt(Math.Pow(currentLocation.X - pontofinal.X, 2) + Math.Pow(currentLocation.Y - pontofinal.Y, 2));

			for (idx_seg = 1; idx_seg < points.Count; idx_seg++)
			{
				var targetPoint = OpVec.Vector3pVector2(sisLidar.PosLidarParaJogo(points[idx_seg]));

				double Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
				while (Dist_Prox > 0.04 && !Emerg)
				{
					double angleToTarget = Math.Atan2(targetPoint.Y - currentLocation.Y, targetPoint.X - currentLocation.X);
					double angleDifference = -((angleToTarget - sisLidar.AngCurr) * (180 / Math.PI)) / 360.0;
					var Dist_final = Math.Sqrt(Math.Pow(currentLocation.X - pontofinal.X, 2) + Math.Pow(currentLocation.Y - pontofinal.Y, 2));

					//if (angleDifference > Math.PI) angleDifference -= 2 * Math.PI;
					//if (angleDifference < -Math.PI) angleDifference += 2 * Math.PI;

					double motor1Speed = 50, motor2Speed = 50;
						motor1Speed *= 1.2 + angleDifference / Math.PI;
						motor2Speed *= 1.2 - angleDifference / Math.PI;


						motor1Speed = Math.Clamp(motor1Speed, -50, 50);
						motor2Speed = Math.Clamp(motor2Speed, -50, 50);

						motor1Speed = motor1Speed * (0.2 + Dist_final / Dist_final_inicio);
						motor2Speed = motor2Speed * (0.2 + Dist_final / Dist_final_inicio);

					int vel = 90;//(int)(Dist_final / Dist_final_inicio * 100);
					int steer = (int)(angleDifference * 150.0);

					sisMotores.MandarSteer(steer, vel);
					currentLocation = sisLidar.PosCurr;
					Dist_Prox = Math.Sqrt(Math.Pow(currentLocation.X - targetPoint.X, 2) + Math.Pow(currentLocation.Y - targetPoint.Y, 2));
					Log(idx_seg + "   aD" + Math.Round(angleDifference, 4) + "      dif" + (angleToTarget - sisLidar.AngCurr) * (180 / Math.PI) + "      vel: " + vel + " Steer: " + steer
					);
					Thread.Sleep(5);
				}
			}
			sisMotores.MandarSteer(0, 0);
		}
	*/

			//Antigo(Invlui mapa negativo)
			//T é o novo. Y(def obj) -> T(fazer percurso) -> G(go, ir para o lugar, mexer o robo)
			/*	if (keyEvent.Keycode == Key.Q)
				{
					Log("T was pressed");

					Log("A fazer limpeza...");
					posesParaObj.Clear();
					foreach (var child in boxParaPoses)
					{
						RemoveChild(child);
					}
					boxParaPoses.Clear();
					idx_seg = 0;
					posesParaObj = new();
					Log("Ok!");

					//(posmapa - TamMapa / 2) / (float)DivMapa de mapa para jogo
					//new System.Numerics.Vector2(pos_obj.Position.X * (float)DivMapa + (TamMapa / 2), pos_obj.Position.Z * (float)DivMapa + (TamMapa / 2));
					var pos_ob = OpVec.Vector3pVector2(pos_obj.Position);

					Log("A fazer distance tranform...");
					var sw = Stopwatch.StartNew();

					var worldGrid = new AStar.WorldGrid(TamMapa, TamMapa);




					// 1 é livre 0 é fechado
					Mat mat = new Mat(TamMapa, TamMapa, DepthType.Cv8U, 1);
					mat.SetTo(sisMapa.Dados_mapa);

					CvInvoke.Normalize(mat, mat, 0, 255.0, normType: NormType.MinMax, dType: DepthType.Cv8U);
					CvInvoke.Threshold(mat, mat, 200, 255, ThresholdType.Binary);

					CvInvoke.DistanceTransform(mat, mat, null, DistType.L2, 3);
					CvInvoke.Normalize(mat, mat, 0, 255.0, NormType.MinMax, dType: DepthType.Cv8U);


					Log("A copiar para array...");
					byte[] DadosMapaTransformados = new byte[TamMapa * TamMapa];
					mat.CopyTo(DadosMapaTransformados);
					mat.Dispose();

					//Para debugging
					//Mat matIn = new Mat(TamMapa, TamMapa, MatType.CV_8S, ExpandedMapData);
					//var ____window___ = new Window("src image", mat);
					//Cv2.WaitKey();


					Log("A copiar dados para grid...");
					Parallel.For(0, DadosMapaTransformados.Length, (i) =>
					{
						worldGrid._grid[i] = (short)(DadosMapaTransformados[i] / 3);//Preciso de div por 3 para ou sn n faz caminho
					});

					image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, DadosMapaTransformados));
					SpriteMapa.Texture = image;
					Log("Tempo total conv mapa: " + sw.ElapsedMilliseconds);

					var pathfinderOptions = new AStar.Options.PathFinderOptions
					{
						SearchLimit = TamMapa * TamMapa,
						UseDiagonals = true,
						//PunishChangeDirection = false,
						//HeuristicFormula = AStar.Heuristics.HeuristicFormula.Euclidean,
						Weighting = AStar.Options.Weighting.Positive
					};
					var pathfinder = new AStar.PathFinder(worldGrid, pathfinderOptions);


					sw.Restart();
					Log($"Obj jogo: {pos_ob} start lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr))} end lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))}");

					var ResultadoPathFinder = pathfinder.FindPath(
						OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr)),
						OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))
					).ToList();

					Log($"Cam enc! {sw.ElapsedMilliseconds}ms Tam: {posesParaObj.Count}");

					var matPos = new StandardMaterial3D() { AlbedoColor = new Godot.Color(0.5f, 0.8f, 1) };

					for (int i = 0; i < posesParaObj.Count; i++)
					{
						boxParaPoses.Add(new CsgBox3D()
						{
							Position = OpVec.Vector2pVector3(posesParaObj[i]),
							Size = new Vector3(0.01f, 1, 0.01f),
							Material = matPos,
						});
						AddChild(boxParaPoses[i]);
					}
				}

	*/
			/*if (keyEvent.Keycode == Key.F)
			{
				Log("F was pressed");

				Log("A fazer limpeza...");
				poses_cam.Clear();
				foreach (var child in boxesPoses)
				{
					RemoveChild(child);
				}
				boxesPoses.Clear();
				idx_seg = 0;
				poses_cam = new();
				Log("Ok!");

				//(posmapa - TamMapa / 2) / (float)DivMapa de mapa para jogo
				//new System.Numerics.Vector2(pos_obj.Position.X * (float)DivMapa + (TamMapa / 2), pos_obj.Position.Z * (float)DivMapa + (TamMapa / 2));
				 posObj = OpVec.Vector3pVector2(pos_obj.Position);

				Log("for...");

				var worldGrid = new AStar.WorldGrid(TamMapa, TamMapa);
				var sw = Stopwatch.StartNew();
				byte[] ExpandedMapData = new byte[TamMapa * TamMapa];



				int bb = 2 / 2; //tam para fazer parede
				int max = TamMapa * TamMapa;
				var dados_mapa = sisMapa.Dados_mapa;
				Parallel.For(bb, max, (i) =>// 1 é livre 0 é fechado
				{
					if (dados_mapa[i] == 0)
					{
						int x = i / TamMapa;
						int y = i % TamMapa;

						for (int x_ = x - bb; x_ < x + bb; x_++)
						{
							for (int y_ = y - bb; y_ < y + bb; y_++)
							{
								int i__ = x_ * TamMapa + y_;
								if (i__ >= 0 && i__ < max)
								{
									worldGrid._grid[i__] = 0;
									ExpandedMapData[i__] = 1;
								}
							}
						}
						ExpandedMapData[i] = 50;
					}

				});
				Parallel.For(0, TamMapa * TamMapa, (i) =>// 1 é livre 0 é fechado
				{
					if (dados_mapa[i] == 254)
					{
						if (ExpandedMapData[i] != 1 && ExpandedMapData[i] != 50)
						{
							worldGrid._grid[i] = 1;
							ExpandedMapData[i] = 254;
						}
					}
				});




				image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, ExpandedMapData));
				SpriteMapa.Texture = image;



				image = ImageTexture.CreateFromImage(Image.CreateFromData(TamMapa, TamMapa, false, Image.Format.L8, ExpandedMapData));
				SpriteMapa.Texture = image;
				Log("Tempo conv mapa: " + sw.ElapsedMilliseconds);

				var pathfinderOptions = new AStar.Options.PathFinderOptions
				{
					SearchLimit = 80000,
					//UseDiagonals = true,
					PunishChangeDirection = false,
					HeuristicFormula = AStar.Heuristics.HeuristicFormula.Euclidean,
					//Weighting = AStar.Options.Weighting.Positive
				};
				var pathfinder = new AStar.PathFinder(worldGrid, pathfinderOptions);


				sw.Restart();
				Log($"Obj jogo: {posObj} ini lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr))} fim lidar: {OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))}");

				poses_cam = pathfinder.FindPath(
					OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(sisLidar.PosCurr)),
					OpVec.Vector2pPoint(sisLidar.PosJogoParaLidar(pos_ob))
				).ToList();

				Log(sw.ElapsedMilliseconds + "  Cam enc! Tam: " + poses_cam.Count);

				var matPos = new StandardMaterial3D() { AlbedoColor = new Godot.Color(0.5f, 0.8f, 0) };

				for (int i = 0; i < poses_cam.Count; i++)
				{
					boxesPoses.Add(new CsgBox3D()
					{
						Position = sisLidar.PosLidarParaJogo(poses_cam[i]),
						Size = new Vector3(0.01f, 1, 0.01f),
						Material = matPos,
					});
					AddChild(boxesPoses[i]);
				}
			}

*/
